// <auto-generated />
using System;
using EcommerceWebApi.Repository.Ecommerce;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EcommerceWebApi.Migrations
{
    [DbContext(typeof(EcommerceContext))]
    partial class EcommerceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EcommerceWebApi.Repository.Ecommerce.Admin", b =>
                {
                    b.Property<Guid>("AdminId")
                        .HasColumnName("adminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnName("passwordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnName("passwordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("AdminId");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("EcommerceWebApi.Repository.Ecommerce.Cart", b =>
                {
                    b.Property<Guid>("CartId")
                        .HasColumnName("cartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("createdDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnName("updatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnName("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("EcommerceWebApi.Repository.Ecommerce.CartProduct", b =>
                {
                    b.Property<Guid>("CartProductId")
                        .HasColumnName("cartProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnName("cartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("createdDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("ProductId")
                        .HasColumnName("productId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnName("updatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("CartProductId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartProduct");
                });

            modelBuilder.Entity("EcommerceWebApi.Repository.Ecommerce.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnName("categoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("EcommerceWebApi.Repository.Ecommerce.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .HasColumnName("customerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("address")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("city")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnName("fullName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("PersonalIdentityNumber")
                        .IsRequired()
                        .HasColumnName("personalIdentityNumber")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<Guid>("UserId")
                        .HasColumnName("userId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasColumnName("zipcode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("CustomerId");

                    b.HasIndex("PersonalIdentityNumber")
                        .IsUnique()
                        .HasName("IX_Customer");

                    b.HasIndex("UserId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("EcommerceWebApi.Repository.Ecommerce.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnName("orderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnName("orderDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("OrderSessionId")
                        .HasColumnName("orderSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnName("total")
                        .HasColumnType("decimal(7, 2)");

                    b.Property<Guid>("UserId")
                        .HasColumnName("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderId");

                    b.HasIndex("OrderSessionId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("EcommerceWebApi.Repository.Ecommerce.OrderSession", b =>
                {
                    b.Property<Guid>("OrderSessionId")
                        .HasColumnName("orderSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("createdDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnName("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderSessionId");

                    b.ToTable("OrderSession");
                });

            modelBuilder.Entity("EcommerceWebApi.Repository.Ecommerce.OrderSessionProduct", b =>
                {
                    b.Property<Guid>("OrderSessionProductId")
                        .HasColumnName("orderSessionProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("createdDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("OrderSessionId")
                        .HasColumnName("orderSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnName("productId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderSessionProductId");

                    b.HasIndex("OrderSessionId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderSessionProduct");
                });

            modelBuilder.Entity("EcommerceWebApi.Repository.Ecommerce.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnName("productId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnName("categoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnName("image")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<double>("Price")
                        .HasColumnName("price")
                        .HasColumnType("float");

                    b.Property<int>("Stock")
                        .HasColumnName("stock")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("EcommerceWebApi.Repository.Ecommerce.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnName("userId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnName("passwordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnName("passwordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("UserId");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasName("IX_User");

                    b.ToTable("User");
                });

            modelBuilder.Entity("EcommerceWebApi.Repository.Ecommerce.CartProduct", b =>
                {
                    b.HasOne("EcommerceWebApi.Repository.Ecommerce.Cart", "Cart")
                        .WithMany("CartProduct")
                        .HasForeignKey("CartId")
                        .HasConstraintName("FK_CartProduct_Cart")
                        .IsRequired();

                    b.HasOne("EcommerceWebApi.Repository.Ecommerce.Product", "Product")
                        .WithMany("CartProduct")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_CartProduct_Product")
                        .IsRequired();
                });

            modelBuilder.Entity("EcommerceWebApi.Repository.Ecommerce.Customer", b =>
                {
                    b.HasOne("EcommerceWebApi.Repository.Ecommerce.User", "User")
                        .WithMany("Customer")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Customer_User")
                        .IsRequired();
                });

            modelBuilder.Entity("EcommerceWebApi.Repository.Ecommerce.Order", b =>
                {
                    b.HasOne("EcommerceWebApi.Repository.Ecommerce.OrderSession", "OrderSession")
                        .WithMany("Order")
                        .HasForeignKey("OrderSessionId")
                        .HasConstraintName("FK_Order_OrderSession")
                        .IsRequired();
                });

            modelBuilder.Entity("EcommerceWebApi.Repository.Ecommerce.OrderSessionProduct", b =>
                {
                    b.HasOne("EcommerceWebApi.Repository.Ecommerce.OrderSession", "OrderSession")
                        .WithMany("OrderSessionProduct")
                        .HasForeignKey("OrderSessionId")
                        .HasConstraintName("FK_OrderSessionProduct_OrderSession")
                        .IsRequired();

                    b.HasOne("EcommerceWebApi.Repository.Ecommerce.Product", "Product")
                        .WithMany("OrderSessionProduct")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_OrderSessionProduct_Product")
                        .IsRequired();
                });

            modelBuilder.Entity("EcommerceWebApi.Repository.Ecommerce.Product", b =>
                {
                    b.HasOne("EcommerceWebApi.Repository.Ecommerce.Category", "Category")
                        .WithMany("Product")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Product_Category")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
